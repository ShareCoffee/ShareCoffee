// Generated by CoffeeScript 1.8.0
(function() {
  var root;

  root = typeof window !== "undefined" && window !== null ? window : global;

  root.ShareCoffee || (root.ShareCoffee = {});

  root.ShareCoffee.Commons = (function() {
    function _Class() {}

    _Class.getQueryString = function() {
      if (document.URL.indexOf('?') === -1) {
        return "";
      }
      return document.URL.split("?")[1];
    };

    _Class.getQueryStringParameter = function(parameterName) {
      var p, parameterValue, params, _ref;
      params = this.getQueryString().split("&");
      parameterValue = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          p = params[_i];
          if (p.split("=")[0] === parameterName) {
            _results.push(p.split("=")[1]);
          }
        }
        return _results;
      })();
      return (_ref = parameterValue[0]) != null ? _ref : '';
    };

    _Class.getAppWebUrl = function() {
      var appWebUrl, appWebUrlFromQueryString;
      if (ShareCoffee.Commons.loadAppWebUrlFrom != null) {
        if (typeof ShareCoffee.Commons.loadAppWebUrlFrom === 'string') {
          return ShareCoffee.Commons.loadAppWebUrlFrom;
        }
        return ShareCoffee.Commons.loadAppWebUrlFrom();
      } else if ((typeof _spPageContextInfo !== "undefined" && _spPageContextInfo !== null) && (_spPageContextInfo.webAbsoluteUrl != null)) {
        return _spPageContextInfo.webAbsoluteUrl;
      }
      appWebUrlFromQueryString = ShareCoffee.Commons.getQueryStringParameter("SPAppWebUrl");
      if (appWebUrlFromQueryString) {
        appWebUrl = decodeURIComponent(appWebUrlFromQueryString);
        return appWebUrl.replace(/#.*$/, '');
      } else {
        if (console && console.error) {
          console.error("_spPageContextInfo is not defined");
        }
        return "";
      }
    };

    _Class.getHostWebUrl = function() {
      var hostWebUrlFromQueryString;
      if (ShareCoffee.Commons.loadHostWebUrlFrom != null) {
        if (typeof ShareCoffee.Commons.loadHostWebUrlFrom === 'string') {
          return ShareCoffee.Commons.loadHostWebUrlFrom;
        }
        return ShareCoffee.Commons.loadHostWebUrlFrom();
      }
      hostWebUrlFromQueryString = ShareCoffee.Commons.getQueryStringParameter("SPHostUrl");
      if (hostWebUrlFromQueryString) {
        return decodeURIComponent(hostWebUrlFromQueryString);
      } else {
        if (console && console.error) {
          console.error("SPHostUrl is not defined in the QueryString");
        }
        return "";
      }
    };

    _Class.getApiRootUrl = function() {
      return "" + (ShareCoffee.Commons.getAppWebUrl()) + "/_api/";
    };

    _Class.getFormDigest = function() {
      var _ref;
      if (ShareCoffee.Commons.formDigestValue != null) {
        if (typeof ShareCoffee.Commons.formDigestValue === 'string') {
          return ShareCoffee.Commons.formDigestValue;
        }
        return ShareCoffee.Commons.formDigestValue();
      }
      return (_ref = document.getElementById('__REQUESTDIGEST')) != null ? _ref.value : void 0;
    };

    _Class.formDigestValue = null;

    _Class.infect = function() {
      var forms, hostUrl, links;
      hostUrl = ShareCoffee.Commons.getQueryStringParameter("SPHostUrl");
      links = document.getElementsByTagName("a");
      return forms = document.getElementsByTagName("form");
    };

    _Class._infectElement = function(elements, attribute) {
      var e, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        e = elements[_i];
        _results.push((function(e) {
          if (e[attribute] != null) {
            return console.dir(e);
          }
        })(e));
      }
      return _results;
    };

    return _Class;

  })();

}).call(this);
